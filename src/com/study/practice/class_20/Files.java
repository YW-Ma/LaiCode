package com.study.practice.class_20;

public class Files {
    public static void main(String[] args) {
        String str = "648 Lowest Common Ancestor Of M Nodes In A K-nary Tree\nRequest edit access\n\n\nShare\nFileEditViewToolsHelp\nTo enable screen reader support, press Ctrl+Alt+Z To learn about keyboard shortcuts, press Ctrl+slash\nLowest Common Ancestor Of M Nodes In A K-nary Tree\nGiven M nodes in a K-nary tree, find their lowest common ancestor.\n\nhttps://app.laicode.io/app/problem/648\n\npublic class LCAVI {\n  static class KnaryTreeNode {\n    int key;\n    List<KnaryTreeNode> children;\n\n    public KnaryTreeNode(int key) {\n      this.key = key;\n      this.children = new ArrayList<>();\n    }\n  }\n\n  // TC: O(n)\n  // SC: O(h + m)\n  public KnaryTreeNode lowestCommonAncestor(KnaryTreeNode root, List<KnaryTreeNode>\nnodes) {\n    // Assumptions: the list of nodes is not null or not empty,\n    // all the nodes in the list are guaranteed to be in the tree.\n    Set<KnaryTreeNode> set = new HashSet<KnaryTreeNode>(nodes);\n    return helper(root, set);\n  }\n\n  private KnaryTreeNode helper(KnaryTreeNode root, Set<KnaryTreeNode> set) {\n    if (root == null || set.contains(root)) {\n      return root;\n    }\n    KnaryTreeNode found = null;\n    for (KnaryTreeNode child : root.children) {\n      KnaryTreeNode node = helper(child, set);\n      if (node == null) {\n        continue;\n      }\n      if (found == null) {\n        found = node;\n      } else {\n        return root;\n      }\n    }\n    return found;\n  }\n}\n\nLowest Common Ancestor Of M Nodes In A K-nary Tree\nTurn on screen reader support\"";
        System.out.println(str);
    }
}
